require(ggplot2)
require(stats)
require(graphics)
require(mgcv)
require(Epi)
require(rpart)
require(rattle)
require(randomForest)

data<-read.csv('project - data.csv',stringsAsFactors = FALSE, header=T)
str(data)

#y를 이산형 변수로 만들기
data$y_num<-ifelse(data$y=='no',0,1)

###===============================================================\
##EDA
##1-1.고객들의 경제 지수 (emp.var.rate, cons.price.idx, cons.conf.idx)
#emp.var.rate #discrete, what is this?????, meaningful var
summary(data$emp.var.rate)
par(mfrow=c(1,2))
hist(data$emp.var.rate[data$y=='no']);  hist(data$emp.var.rate[data$y=='yes'])

#cons.price.idx meaningful var
summary(data$cons.price.idx)
hist(data$cons.price.idx)

#cons.conf.idx
summary(data$cons.conf.idx)
hist(data$cons.conf.idx)

png("수치1.png")
par(mfrow=c(1,3))

boxplot(emp.var.rate~y, data=data, main="Box plot of emp.var.rate",
        yaxt="n", xlab="emp.var.rate", col=terrain.colors(5))

boxplot(cons.price.idx~y, data=data, main="Box plot of cons.price.idx",
        yaxt="n", xlab="cons.price.idx", col=terrain.colors(5))

boxplot(cons.conf.idx~y, data=data, main="Box plot of cons.conf.idx",
        yaxt="n", xlab="cons.conf.idx", col=terrain.colors(5))

dev.off()

##1-2.유의한 수치형 변수 (duration,  nr.employed)
#duration
hist(data$duration)
boxplot(duration~y,data=data, main='Duration')

#nr.employed  why double type??
table(data$nr.employed)


png("수치2.png")
par(mfrow=c(1,2))

boxplot(duration~y, data=data, main="Box plot of duration",
        yaxt="n", xlab="duration", col=terrain.colors(5))

boxplot(nr.employed~y, data=data, main="Box plot of nr.employed",
        yaxt="n", xlab="nr.employed", col=terrain.colors(5))

dev.off()

##1-3. spline을 이용한 파생 변수 (age, campaign, euribor3m)
#age
hist(data$age)#skewed to the left
boxplot(age~y,data=data)#no big difference

#campaign
hist(data$campaign)
boxplot(campaign~y,data=data)

#euribor3m
hist(data$euribor3m)
boxplot(euribor3m~y,data=data)#different distribution


png("수치3-1.png")
par(mfrow=c(1,3))

boxplot(age~y, data=data, main="Box plot of age",
        yaxt="n", xlab="age", col=terrain.colors(5))

boxplot(campaign~y, data=data, main="Box plot of campaign",
        yaxt="n", xlab="campaign", col=terrain.colors(5))

boxplot(euribor3m~y, data=data, main="Box plot of euribor3m",
        yaxt="n", xlab="euribor3m", col=terrain.colors(5))
dev.off()

#smoothing spline

png("수치3-2.png")
par(mfrow=c(1,3))

plot(y_num~age,data=data)
ss_age<-smooth.spline(data[,'age'],data[,'y_num'],df=10)
lines(ss_age,lty=2,col='red')#25-60, others have difference

plot(y_num~campaign,data=data)
ss_camp<-smooth.spline(data[,'campaign'],data[,'y_num'],df=10)
lines(ss_camp,lty=2,col='red')

plot(y_num~euribor3m,data=data)
ss_eur<-smooth.spline(data[,'euribor3m'],data[,'y_num'],df=10)
lines(ss_eur,lty=2,col='red')

dev.off()

##1-4. 의미없는 명목형 변수들 (housing, loan, day_of_week)

png("명목1.png")
par(mfrow=c(1,3))

#housing
mosaicplot(~y+housing,data=data)

#loan
mosaicplot(~y+loan,data=data)

#day_of_week
mosaicplot(~y+day_of_week,data=data)

dev.off()

##1-5. 차원 줄이기(age, education, month)
#age
png("명목2.png")
mosaicplot(~y+job,data=data)
dev.off()

job_prop_tab<-prop.table(table(data$job,data$y))
job_odds<-job_prop_tab[,2]/job_prop_tab[,1]
jfit<-lm(y_num~job,data=data)
summary(jfit)
#divide in 3 groups
sort(job_odds)
sort(summary(jfit)$coefficients[,1])
#generate new variable
data$job_grade<-ifelse(data$job %in% c('blue-collar','entrepreneur','services'),'A',
ifelse(data$job %in% c('retired','student'),'C','B'))

#education
edu_prop_tab<-prop.table(table(data$education,data$y))
edu_odds<-edu_prop_tab[,2]/edu_prop_tab[,1]
efit<-lm(y_num~education,data=data)
summary(efit)
#divide in 3 groups
sort(edu_odds)
sort(summary(efit)$coefficients[,1])
#generate new variable
data$education_grade<-ifelse(data$education %in% c('basic.9y','basic.6y','basic.4y'),'C',
ifelse(data$education=='illiterate','B','A'))

#month
month_prop_tab<-prop.table(table(data$month,data$y))
month_odds<-month_prop_tab[,2]/month_prop_tab[,1]
monfit<-lm(y_num~month,data=data)
summary(monfit)
#divide in 4 groups
sort(month_odds)
sort(summary(monfit)$coefficients[,1])
#generate new variable
data$month_grade<-ifelse(data$month=='may','D',
ifelse(data$month %in% c('jul','nov','jun','aug'),'C',
ifelse(data$month=='apr','B','A')))


png("명목2-5.png")
par(mfrow=c(1,3))

#job_grade
mosaicplot(~y+job_grade,data=data)

#education_grade
mosaicplot(~y+education_grade,data=data)

#month_grade
mosaicplot(~y+month_grade,data=data)

dev.off()


#1-5. dimension reduction2 (default, marital, pdays, previous)
#default
table(data$default)
mosaicplot(~y+default,data=data)
data[data$default=='yes','default']<-'no'

#marital
table(data$marital)
mosaicplot(~y+marital,data=data)
data$single<-ifelse(data$marital=='single',1,0)

##pdays   999exists how handling 999(use mean or 0, consider binning)
boxplot(data$pdays[data$pdays==999]); hist(data$pdays[data$pdays==999])
summary(data$pdays)
boxplot(pdays~y,data=data,subset=which(data$pdays!=999))
mosaicplot(~pdays+y,data=data,subset=which(data$pdays!=999))
data$pdays_bin<-ifelse(data$pdays==999,0,1)

#previous
table(data$previous); par(mfrow=c(1,1)); hist(data$previous)
boxplot(previous~y,data=data, main='previous')
data$previous_bin<-ifelse(data$previous==0,0,1)

#1-6. categorical variables without any process (contact, poutcome)

png("명목2-7.png")
par(mfrow=c(1,2))

#poutcome
table(data$poutcome)
mosaicplot(~y+poutcome,data=data)

#contact
table(data$contact)
mosaicplot(~y+contact,data=data)

dev.off()

str(data)
##eliminate useless variables
newdata<-data[,-c(2,3,4,6,7,9,10,13,14,18,21)]
str(newdata)
##17 variables

##====================================================================
#split the data,  consider oversampling, cv
no_label<-which(data$y_num==0); yes_label<-which(data$y_num==1)
length(no_label); length(yes_label)
set.seed(10)
train_no_label<-sample(no_label,29750,replace=FALSE)
train_yes_label<-sample(yes_label,4190,replace=FALSE)
validation_label<-list(
  val1=c(train_no_label[1:5950],sample(train_yes_label,2930)),
  val2=c(train_no_label[5951:11900],sample(train_yes_label,2930)),
  val3=c(train_no_label[11911:17850],sample(train_yes_label,2930)),
  val4=c(train_no_label[17851:23800],sample(train_yes_label,2930)),
  val5=c(train_no_label[23801:29750],sample(train_yes_label,2930))
)
test_set<-newdata[-c(train_no_label,train_yes_label),]
train_set<-newdata[c(train_no_label,train_yes_label),]
##=====================================================================
##modelling process

#1-1. logistic with all variables
logi_fit1<-gam(
y_num~s(age)+default+contact+duration+s(campaign)+pdays_bin+previous_bin+poutcome+emp.var.rate+
cons.price.idx+s(euribor3m)+nr.employed+job_grade+single+education_grade+month_grade
,family=binomial,data=newdata[validation_label$val1,])
summary(logi_fit1)
p<-predict(logi_fit1,newdata=newdata[validation_label$val2,],type='response')
ROC(p,newdata$y_num[validation_label$val2])	#threshold=0.206, 85.1% AUC=0.936
# t1<-table(ifelse(p>0.206,1,0),newdata$y_num[validation_label$val2])
#pp1<-prop.table(t1)

#1-2. nr.employed 제거
logi_fit2<-gam(
y_num~s(age)+default+contact+duration+s(campaign)+pdays_bin+previous_bin+poutcome+emp.var.rate+
cons.price.idx+s(euribor3m)+job_grade+single+education_grade+month_grade
,family=binomial,data=newdata[validation_label$val1,])
summary(logi_fit2)
p<-predict(logi_fit2,newdata=newdata[validation_label$val2,],type='response')
ROC(p,newdata$y_num[validation_label$val2])	#threshold=0.211, 85.1% AUC=0.936
# t2<-table(ifelse(p>0.211,1,0),newdata$y_num[validation_label$val2])
#pp2<-prop.table(t2)

#1-3. single 제거
logi_fit3<-gam(
y_num~s(age)+default+contact+duration+s(campaign)+pdays_bin+previous_bin+poutcome+emp.var.rate+
cons.price.idx+s(euribor3m)+job_grade+education_grade+month_grade
,family=binomial,data=newdata[validation_label$val1,])
summary(logi_fit3)
p<-predict(logi_fit3,newdata=newdata[validation_label$val2,],type='response')
ROC(p,newdata$y_num[validation_label$val2])	#threshold=0.213, 85.2% AUC=0.936
# t3<-table(ifelse(p>0.213,1,0),newdata$y_num[validation_label$val2])
#pp3<-prop.table(t3)

#1-4. previous_bin 제거
logi_fit4<-gam(
y_num~s(age)+default+contact+duration+s(campaign)+pdays_bin+poutcome+emp.var.rate+
cons.price.idx+s(euribor3m)+job_grade+education_grade+month_grade
,family=binomial,data=newdata[validation_label$val1,])
summary(logi_fit4)
p<-predict(logi_fit4,newdata=newdata[validation_label$val2,],type='response')
ROC(p,newdata$y_num[validation_label$val2])	#threshold=0.213, 85.3% AUC=0.936
# t4<-table(ifelse(p>0.213,1,0),newdata$y_num[validation_label$val2])
#pp4<-prop.table(t4)


##모형 비교
#1. AIC 비교
AIC(logi_fit1,logi_fit2,logi_fit3,logi_fit4)
#2. 오분류율 비교
c(pp1[1,1]+pp1[2,2],pp2[1,1]+pp2[2,2],pp3[1,1]+pp3[2,2],pp4[1,1]+pp4[2,2])

##CV
m<-numeric(5)
for(i in 1:5){
  set<-c(1:5)[-i]
  fit_logi<-gam(
  y_num~s(age)+default+contact+duration+s(campaign)+pdays_bin+poutcome+emp.var.rate+
  cons.price.idx+s(euribor3m)+job_grade+education_grade+month_grade
  ,family=binomial,data=newdata[
  c(validation_label[[set[1]]],validation_label[[set[2]]],validation_label[[set[3]]],validation_label[[set[4]]])
  ,])
  pred<-predict(logi_fit4,newdata=newdata[validation_label[[i]],],type='response')
  tb<-table(ifelse(pred>0.213,1,0),newdata$y_num[validation_label[[i]]])
  pp<-prop.table(tb)
  m[i]<-pp[1,1]+pp[2,2]
}

#평균 오분류율 
mean(m)

##tree model
tree_fit1<-rpart(y_num~.,data=newdata[validation_label$val1,],control=rpart.control(cp=0.004))
#fancyRpartPlot(tree_fit1)
p<-predict(tree_fit1,newdata=newdata[validation_label$val2,])
ROC(p,newdata$y_num[validation_label$val2])	#AUC 0.920
tt1<-table(ifelse(p>0.235,1,0),newdata$y_num[validation_label$val2])
pt1<-prop.table(tt1)	#83.6%
 
printcp(tree_fit1)
plotcp(tree_fit1)

tree_fit2<-rpart(y_num~.,data=newdata[validation_label$val1,], control=rpart.control(cp=0.014))
p<-predict(tree_fit2,newdata=newdata[validation_label$val2,])
ROC(p,newdata$y_num[validation_label$val2])
tt2<-table(ifelse(p>0.038,1,0),9newdata$y_num[validation_label$val2])
pt2<-prop.table(tt2)

printcp(tree_fit2)
plotcp(tree_fit2)


##CV
n<-numeric(5)
for(i in 1:5){
  set<-c(1:5)[-i]
  fit_tree1<-rpart(y_num~.,data=newdata[
  c(validation_label[[set[1]]],validation_label[[set[2]]],validation_label[[set[3]]],validation_label[[set[4]]])
  ,],control=rpart.control(cp=0.004))
  pred<-predict(fit_tree1,newdata=newdata[validation_label[[i]],])
  tb<-table(ifelse(pred>0.235,1,0),newdata$y_num[validation_label[[i]]])
  pp<-prop.table(tb)
  n[i]<-pp[1,1]+pp[2,2]
}

#평균 오분류율 
mean(n)

#최종 모형 평가
logi_fit4<-gam(
y_num~s(age)+default+contact+duration+s(campaign)+pdays_bin+poutcome+emp.var.rate+
cons.price.idx+s(euribor3m)+job_grade+education_grade+month_grade
,family=binomial,data=train_set)

p<-predict(logi_fit4,newdata=test_set,type='response')
ROC(p,test_set$y_num)	
# t4<-table(ifelse(p>0.085,1,0),test_set$y_num)
#pp4<-prop.table(t4)

